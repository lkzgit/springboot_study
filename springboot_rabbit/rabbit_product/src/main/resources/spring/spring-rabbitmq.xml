<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!--    过期时间设置-->
    <!--定义过期队列及其属性，不存在则自动创建 ,auto_declare是否自动删除-->
<!--    <rabbit:queue id="my_ttl_queue" name="my_ttl_queue" auto-declare="true">-->
<!--        <rabbit:queue-arguments>-->
<!--            &lt;!&ndash;投递到该队列的消息如果没有消费都将在6秒之后被删除&ndash;&gt;-->
<!--            <entry key="x-message-ttl" value-type="long" value="6000"/>-->
<!--        </rabbit:queue-arguments>-->
<!--    </rabbit:queue>-->

    <!--    死信队列-->
    <!--定义定向交换机中的持久化死信队列，不存在则自动创建-->
    <rabbit:queue id="my_dlx_queue" name="my_dlx_queue" auto-declare="true"/>

    <!--定义广播类型交换机；并绑定上述两个队列-->
    <rabbit:direct-exchange id="my_dlx_exchange" name="my_dlx_exchange" auto-declare="true">
        <rabbit:bindings>
            <!--绑定路由键my_ttl_dlx、my_max_dlx，可以将过期的消息转移到my_dlx_queue队列-->
            <rabbit:binding key="my_ttl_dlx" queue="my_dlx_queue"/>
            <rabbit:binding key="my_max_dlx" queue="my_dlx_queue"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--定义过期队列及其属性，不存在则自动创建-->
    <rabbit:queue id="my_ttl_dlx_queue" name="my_ttl_dlx_queue" auto-declare="true">
        <rabbit:queue-arguments>
            <!--投递到该队列的消息如果没有消费都将在6秒之后被投递到死信交换机-->
            <entry key="x-message-ttl" value-type="long" value="6000"/>
            <!--设置当消息过期后投递到对应的死信交换机-->
            <entry key="x-dead-letter-exchange" value="my_dlx_exchange"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!--定义限制长度的队列及其属性，不存在则自动创建-->
    <rabbit:queue id="my_max_dlx_queue" name="my_max_dlx_queue" auto-declare="true">
        <rabbit:queue-arguments>
            <!--投递到该队列的消息最多2个消息，如果超过则最早的消息被删除投递到死信交换机-->
            <entry key="x-max-length" value-type="long" value="2"/>
            <!--设置当消息过期后投递到对应的死信交换机-->
            <entry key="x-dead-letter-exchange" value="my_dlx_exchange"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!--定义定向交换机 根据不同的路由key投递消息-->
    <rabbit:direct-exchange id="my_normal_exchange" name="my_normal_exchange" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding key="my_ttl_dlx" queue="my_ttl_dlx_queue"/>
            <rabbit:binding key="my_max_dlx" queue="my_max_dlx_queue"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--========================================================================================-->
    <!--===============================        确认机制          ===============================-->
    <!--========================================================================================-->
    <!-- publisher-confirms="true" 表示：启用了消息确认
    事务和确认机制不能并存
    publisher-confirms="true"
    publisher-returns="true"
    -->
    <rabbit:connection-factory id="connectionFactory" host="129.211.164.41"
                               port="5672"
                               username="user"
                               password="password"
                               virtual-host="/lkz"

    />
    <!-- 消息回调处理类 -->
    <bean id="confirmCallback" class="springboot.rabbitmq.fallback.MsgSendConfirmCallBack"/>

    <!-- 消息失败回调类 -->
    <bean id="sendReturnCallback" class="springboot.rabbitmq.fallback.MsgSendReturnCallback"/>

    <!--定义rabbitTemplate对象操作可以在代码中方便发送消息-->
    <!-- confirm-callback="confirmCallback" 表示：消息失败回调 -->
    <!-- return-callback="sendReturnCallback" 表示：消息失败回调 ,同时需配置mandatory="true"，否则消息则丢失-->
    <!-- channel-transacted="true" 表示：支持事务操作 -->
    <rabbit:template id="rabbitTemplate"
                     connection-factory="connectionFactory"
                     confirm-callback="confirmCallback"
                     return-callback="sendReturnCallback"
                     mandatory="true"
                     channel-transacted="true"
    />
    <!--平台事务管理器-->
    <bean id="transactionManager" class="org.springframework.amqp.rabbit.transaction.RabbitTransactionManager">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>
</beans>